{
    "current_project": "codeflow",
    "projects": {
        "copiador": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/copiadorPython",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__,.git",
            "archivos_prohibidos": ".gitignore",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.\n\nCuando yo te lo indique, comienza a pasarme archivo por archivo COMPLETO.\nNO ME PUEDES PASAR ARCHIVOS INCOMPLETOS, ESPERA QUE YO TE COMIENCE A SOLICITAR LOS ARCHIVOS COMPLETOS\n\nNO ME MUESTRES CODIGO HASTA QUE TE LO PIDA",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "makeup": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/araulmakeup",
            "directorio_principal": "components\\Admin\\Ecommerce,lib,pages\\admin\\ecommerce,utils,components\\Shared\\UI,types",
            "archivos": "",
            "directorios_prohibidos": ".next,.git,node_modules,python,html-templates,public",
            "archivos_prohibidos": "tsconfig.tsbuildinfo,package-lock.json,.env.local,.gitignore,countries.json",
            "formatos_prohibidos": ".md,.css,.zip,.jpg,.png,.svg,.psd,.gif",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con typescript\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de typescript\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "bolivarflash": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/bolivarflashv2",
            "directorio_principal": "",
            "archivos": "contactController.ts,emailSender.js",
            "directorios_prohibidos": "node_modules,.git",
            "archivos_prohibidos": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes, a menos que sea estrictamente necesario para cumplir con la solicitud.\nSi necesitas realizar cambios, agrega o reemplaza \u00fanicamente lo necesario para satisfacer los requisitos especificados.\n\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea totalmente compatible con TypeScript.\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de TypeScript.\n\nAseg\u00farate de que cada archivo generado comience con la misma l\u00ednea de comentario que se encuentra en los archivos proporcionados, donde se indica la ubicaci\u00f3n y el nombre del archivo.\n\nAntes de proceder, debes indicarme c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos creados o modificados. IMPORTANTE: solo menciona los archivos que tengan cambios reales.\n\nSOLICITUD: Deseo que arriba de admin/chats haya un selector con las opciones de OrderStatus.ts por defecto vendra en placed, si se selecciona otro status se cargaran los chats que tengan ordenes con esos respectivos status\n\n\nsrc\\models\\AccountHolder.ts\n// src/models/AccountHolder.ts\nexport interface AccountHolder {\n  name: string;\n  userId: string;\n  createdAt: Date;\n}\n\nsrc\\middleware\\authMiddleware.ts\n// src/middleware/authMiddleware.ts\nimport { Request, Response, NextFunction } from \"express\";\n\n/**\n * Middleware para asegurar que el usuario est\u00e9 autenticado antes de acceder a ciertas rutas.\n */\nexport const checkAuth = (req: Request, res: Response, next: NextFunction): void => {\n  if (!res.locals.isAuthenticated) {\n    // Se env\u00eda el estado 401, pero NO se devuelve la respuesta\n    // (no 'return res.status(...)'), para cumplir con el tipo 'void'.\n    res.status(401).json({ error: \"Unauthorized\" });\n    return;\n  }\n  next();\n};\n\nsrc\\routes\\authRoutes.ts\n// src/routes/authRoutes.ts\nimport { Router } from \"express\";\nimport {\n  renderRegister,\n  renderLogin,\n  handleLogin,\n  handleRegister,\n  logout,\n  checkAuthRedirect,\n} from \"../controllers/authController\";\nimport { checkAdmin } from \"../middleware/adminMiddleware\";\nimport {\n  renderUserList,\n  handleEditUser,\n  handleDeleteUser,\n  renderOrderList,\n  renderAdminChats,\n} from \"../controllers/adminController\";\nimport redisClient from \"../redisClient\";\nimport { db } from \"../firebase\";\nimport { collection, query, where, getDocs } from \"firebase/firestore\";\nimport { OrderStatus } from \"../enums/OrderStatus\";\nimport { initializeChatForOrder } from \"../utils/chatUtils\"; // Importar la funci\u00f3n que inicializa el chat\n\nconst router = Router();\n\nrouter.get(\"/\", async (req, res) => {\n  const envMode = process.env.ENV_MODE || \"production\";\n  const redisError = !redisClient.isReady;\n\n  const isAuthenticated = res.locals.isAuthenticated;\n  let accountHolders: any[] = [];\n\n  if (isAuthenticated) {\n\n    try {\n      const userId = res.locals.userId;\n      const accountHoldersRef = collection(db, \"accountHolders\");\n      const q = query(accountHoldersRef, where(\"userId\", \"==\", userId));\n      const querySnap = await getDocs(q);\n      querySnap.forEach((docSnap) => {\n        accountHolders.push({\n          id: docSnap.id,\n          ...docSnap.data(),\n        });\n      });\n\n      const ordersRef = collection(db, \"orders\");\n      const ordersQuery = query(\n        ordersRef,\n        where(\"userId\", \"==\", userId),\n        where(\"status\", \"==\", OrderStatus.Placed)\n      );\n      const ordersSnap = await getDocs(ordersQuery);\n\n      if (!ordersSnap.empty) {\n        const placedDoc = ordersSnap.docs[0];\n        const placedData = placedDoc.data();\n        let chatData = placedData.chat;\n\n        // Inicializar el chat si no existe o no tiene mensajes\n        if (!chatData || !chatData.messages || chatData.messages.length === 0) {\n          chatData = await initializeChatForOrder(placedDoc.id, userId, placedData.amount);\n        } else {\n          chatData.orderId = placedDoc.id;\n          chatData.userId = userId;\n        }\n\n        return res.render(\"chat\", { chatData });\n      }\n    } catch (error) {\n      console.error(\"Error fetching accountHolders or placed orders:\", error);\n    }\n  }\n\n  res.render(\"index\", { envMode, redisError, accountHolders, isAuthenticated });\n});\n\nrouter.get(\"/register\", checkAuthRedirect, renderRegister);\nrouter.post(\"/register\", checkAuthRedirect, handleRegister);\n\nrouter.get(\"/login\", checkAuthRedirect, renderLogin);\nrouter.post(\"/login\", checkAuthRedirect, handleLogin);\n\nrouter.get(\"/logout\", logout);\n\nrouter.get(\"/admin/users\", checkAdmin, renderUserList);\nrouter.post(\"/admin/users/edit\", checkAdmin, handleEditUser);\nrouter.post(\"/admin/users/delete\", checkAdmin, handleDeleteUser);\n\nrouter.get(\"/admin/orders\", checkAdmin, renderOrderList);\n\nrouter.get(\"/admin/chats\", checkAdmin, renderAdminChats);\n\nexport default router;\n\nsrc\\controllers\\chatsController.ts\n// src/controllers/chatsController.ts\nimport { Request, Response } from \"express\";\nimport { db } from \"../firebase\";\nimport { doc, getDoc } from \"firebase/firestore\";\n\n/**\n * Obtiene la conversaci\u00f3n de chat de una orden.\n * Se espera que el orderId se pase en req.params.\n * Retorna en formato JSON el objeto \"chat\" de la orden.\n */\nexport const getChatConversation = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { orderId } = req.params;\n    if (!orderId) {\n      res.status(400).json({ error: \"Order ID is required.\" });\n      return;\n    }\n    const orderRef = doc(db, \"orders\", orderId);\n    const orderSnap = await getDoc(orderRef);\n    if (!orderSnap.exists()) {\n      res.status(404).json({ error: \"Order not found.\" });\n      return;\n    }\n    const orderData = orderSnap.data();\n    if (!orderData.chat || !orderData.chat.messages) {\n      res.status(404).json({ error: \"Chat not found for this order.\" });\n      return;\n    }\n    res.json({ chat: orderData.chat });\n  } catch (error) {\n    console.error(\"Error fetching chat conversation:\", error);\n    res.status(500).json({ error: \"Internal server error.\" });\n  }\n};\n\nsrc\\controllers\\adminController.ts\n// src/controllers/adminController.ts\nimport { Request, Response } from \"express\";\nimport { db, adminAuth } from \"../firebase\";\nimport {\n  collection,\n  query,\n  doc,\n  getDoc,\n  orderBy,\n  getDocs,\n  startAfter,\n  limit,\n  where,\n} from \"firebase/firestore\";\nimport { updateDocument, deleteDocument } from \"../utils/firestoreService\";\nimport { formatSaldo } from \"../utils/formatSaldo\";\n\nimport { Role } from \"../enums/Role\";\nimport { getPageToken } from \"../utils/pagination\";\nimport { OrderStatus } from \"../enums/OrderStatus\";\nimport { timeAgo } from \"../utils/timeAgo\"; \n\nimport { BDVData, Config } from \"../models/config\"; // Para tipar los documentos de configuraci\u00f3n\n\nconst pageSize = 2;\n\nexport const renderAdminChats = async (req: Request, res: Response): Promise<void> => {\n  try {\n    // Consultar todas las \u00f3rdenes con status \"placed\", ordenadas por createdAt ascendente\n    const ordersRef = collection(db, \"orders\");\n    const q = query(ordersRef, where(\"status\", \"==\", OrderStatus.Placed), orderBy(\"createdAt\", \"asc\"));\n    const querySnapshot = await getDocs(q);\n    const chats = [];\n\n    for (const docSnap of querySnapshot.docs) {\n      const orderData = docSnap.data();\n      // Obtener el email del usuario asociado\n      let userEmail = \"\";\n      if (orderData.userId) {\n        const userDoc = await getDoc(doc(db, \"users\", orderData.userId));\n        if (userDoc.exists()) {\n          const userData = userDoc.data();\n          userEmail = userData.email || \"\";\n        }\n      }\n      // Transformar el email para mostrar solo la parte anterior a \"@gmail.com\"\n      const displayEmail = userEmail ? userEmail.split('@')[0] : \"Sin email\";\n\n      // Convertir createdAt a Date (si es un Firestore Timestamp)\n      const createdAt: Date = orderData.createdAt && orderData.createdAt.toDate ? orderData.createdAt.toDate() : orderData.createdAt;\n\n      chats.push({\n        orderId: docSnap.id,\n        userId: orderData.userId,\n        displayEmail,\n        createdAt,\n        timeAgo: timeAgo(createdAt),\n        chat: orderData.chat || null,\n      });\n    }\n    // Renderizar la vista \"admin/chats\" pasando la lista de chats activos\n    res.render(\"admin/chats\", { content: \"adminChatsContent\", chats });\n  } catch (error) {\n    console.error(\"Error rendering admin chats:\", error);\n    res.status(500).send(\"Error interno\");\n  }\n};\n\nexport const renderUserList = async (req: Request, res: Response) => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const emailFilter = req.query.email?.toString();\n    const roleFilter = req.query.role as Role | undefined;\n\n    const usersRef = collection(db, \"users\");\n    let baseQuery = query(usersRef, orderBy(\"email\"));\n\n    // Aplicar filtros\n    if (emailFilter) {\n      baseQuery = query(\n        baseQuery,\n        where(\"email\", \">=\", emailFilter),\n        where(\"email\", \"<=\", emailFilter + \"\\uf8ff\")\n      );\n    }\n\n    if (roleFilter && Object.values(Role).includes(roleFilter)) {\n      baseQuery = query(baseQuery, where(\"rol\", \"==\", roleFilter));\n    }\n\n    // Obtener total de usuarios\n    const totalSnapshot = await getDocs(baseQuery);\n    const totalUsers = totalSnapshot.size;\n    const totalPages = Math.ceil(totalUsers / pageSize);\n\n    // Obtener documentos paginados\n    let querySnapshot;\n    if (page === 1) {\n      querySnapshot = await getDocs(query(baseQuery, limit(pageSize)));\n    } else {\n      const prevPageToken = await getPageToken(\n        \"users\",\n        page,\n        \"email\",\n        pageSize\n      );\n      querySnapshot = await getDocs(\n        query(baseQuery, startAfter(prevPageToken), limit(pageSize))\n      );\n    }\n\n    // Preparar datos para vista\n    const users = querySnapshot.docs.map((doc) => ({\n      id: doc.id,\n      ...doc.data(),\n    }));\n\n    res.render(\"admin/users\", {\n      users,\n      currentPage: page,\n      totalPages,\n      totalUsers,\n      showingFrom: (page - 1) * pageSize + 1,\n      showingTo: Math.min(page * pageSize, totalUsers),\n      hasNextPage: page < totalPages,\n      hasPreviousPage: page > 1,\n      currentFilters: { email: emailFilter, role: roleFilter },\n      roles: Object.values(Role),\n    });\n  } catch (error) {\n    console.error(\"Error fetching users:\", error);\n    res.redirect(\"/\");\n  }\n};\n\nexport const handleEditUser = async (req: Request, res: Response) => {\n  try {\n    const { userId, newRole } = req.body;\n    const usersRef = collection(db, \"users\");\n\n    await updateDocument(usersRef, userId, { rol: newRole });\n\n    res.json({ success: true, message: req.t(\"admin.userUpdated\") });\n  } catch (error) {\n    console.error(\"Error updating user:\", error);\n    res.status(500).json({ success: false, message: req.t(\"error.general\") });\n  }\n};\n\nexport const handleDeleteUser = async (req: Request, res: Response) => {\n  try {\n    const { userId } = req.body; // userId es el UID\n\n    // Eliminar usuario de Authentication y Firestore\n    await adminAuth.deleteUser(userId);\n    await deleteDocument(collection(db, \"users\"), userId);\n\n    res.json({ success: true, message: req.t(\"admin.userDeleted\") });\n  } catch (error) {\n    console.error(\"Error deleting user:\", error);\n    res.status(500).json({ success: false, message: req.t(\"error.general\") });\n  }\n};\n\n/**\n * Renderiza la lista de \u00f3rdenes paginadas y filtradas por status.\n * Adem\u00e1s, obtiene el email del usuario asociado a cada orden y consulta Firestore\n * para generar el texto del saldo usando la utilidad formatSaldo.\n */\nexport const renderOrderList = async (req: Request, res: Response) => {\n  try {\n    const page = parseInt(req.query.page as string) || 1;\n    const statusFilter = req.query.status?.toString();\n\n    const ordersRef = collection(db, \"orders\");\n    let baseQuery = query(ordersRef, orderBy(\"createdAt\", \"desc\"));\n\n    // Filtro opcional por status\n    if (statusFilter) {\n      baseQuery = query(baseQuery, where(\"status\", \"==\", statusFilter));\n    }\n\n    // Obtener total de \u00f3rdenes\n    const totalSnapshot = await getDocs(baseQuery);\n    const totalOrders = totalSnapshot.size;\n    const totalPages = Math.ceil(totalOrders / pageSize);\n\n    // Obtener documentos paginados\n    let querySnapshot;\n    if (page === 1) {\n      querySnapshot = await getDocs(query(baseQuery, limit(pageSize)));\n    } else {\n      const prevPageToken = await getPageToken(\n        \"orders\",\n        page,\n        \"createdAt\",\n        pageSize\n      );\n      querySnapshot = await getDocs(\n        query(baseQuery, startAfter(prevPageToken), limit(pageSize))\n      );\n    }\n\n    // Para cada orden, obtenemos el email del usuario y transformamos las ofertas\n    const orders = await Promise.all(\n      querySnapshot.docs.map(async (docSnap) => {\n        const orderData = docSnap.data();\n        let userEmail = \"\";\n        if (orderData.userId) {\n          try {\n            const userDoc = await getDoc(doc(db, \"users\", orderData.userId));\n            if (userDoc.exists()) {\n              const userData = userDoc.data();\n              userEmail = userData.email || \"\";\n            }\n          } catch (err) {\n            console.error(\"Error fetching user data:\", err);\n          }\n        }\n        // Transformar las ofertas para que tengan las nuevas claves: usdOffers y bolivarOffers\n        const offers = orderData.offers || {};\n        const transformedOffers = {\n          usdOffers: offers.usdOffers || offers.usd || [],\n          bolivarOffers: offers.bolivarOffers || offers.bolivar || [],\n        };\n        return {\n          id: docSnap.id,\n          ...orderData,\n          offers: transformedOffers,\n          userEmail,\n        };\n      })\n    );\n\n    // Consultar Firestore para obtener bol\u00edvares y la fecha de 'BDVData'\n    // y la tasa en 'RateDoc'\n    let saldoText = \"Saldo no disponible\";\n    let configRate = 71; // Valor por defecto si no se encuentra 'rate'\n\n    try {\n      // Leer BDVData (contiene bolivares y updatedAt)\n      const bdvDocRef = doc(db, \"config\", \"BDVData\");\n      const bdvSnap = await getDoc(bdvDocRef);\n\n      // Leer RateDoc (contiene rate)\n      const rateDocRef = doc(db, \"config\", \"RateDoc\");\n      const rateSnap = await getDoc(rateDocRef);\n\n      // Si hay un rate en la DB, se usa\n      if (rateSnap.exists()) {\n        const configData = rateSnap.data() as Config;\n        if (typeof configData.rate === \"number\") {\n          configRate = configData.rate;\n        }\n      }\n\n      // Si hay bol\u00edvares guardados\n      if (bdvSnap.exists()) {\n        const bdvData = bdvSnap.data() as BDVData;\n        if (typeof bdvData.bolivares === \"number\") {\n          // updatedAt si existe; si no, usar Date local\n          const updatedAt = bdvData.updatedAt || new Date();\n          saldoText = formatSaldo(bdvData.bolivares, updatedAt, configRate);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching BDVData or RateDoc from Firestore:\", error);\n      saldoText = \"Saldo no disponible\";\n    }\n\n    // Renderizar la vista de \u00f3rdenes\n    res.render(\"admin/orders\", {\n      orders,\n      currentPage: page,\n      totalPages,\n      totalOrders,\n      showingFrom: (page - 1) * pageSize + 1,\n      showingTo: Math.min(page * pageSize, totalOrders),\n      hasNextPage: page < totalPages,\n      hasPreviousPage: page > 1,\n      currentFilters: { status: statusFilter },\n      orderStatuses: Object.values(OrderStatus),\n      rate: configRate,\n      saldoText,\n    });\n  } catch (error) {\n    console.error(\"Error fetching orders:\", error);\n    res.redirect(\"/\");\n  }\n};\n\nsrc\\routes\\chatsRoutes.ts\n// src/routes/chatsRoutes.ts\nimport { Router } from \"express\";\nimport { getChatConversation } from \"../controllers/chatsController\";\nimport { checkAdmin } from \"../middleware/adminMiddleware\";\n\nconst router = Router();\n\n// Ruta para obtener la conversaci\u00f3n de un chat de orden (solo para admin)\nrouter.get(\"/admin/chats/conversation/:orderId\", checkAdmin, getChatConversation);\n\nexport default router;\n\nsrc\\enums\\OrderStatus.ts\n// src/enums/OrderStatus.ts\nexport enum OrderStatus {\n  Placed = \"placed\",\n  InProgress = \"inProgress\",\n  Completed = \"completed\",\n  Aborted = \"aborted\",\n}\n\nsrc\\models\\Order.ts\n// src/models/Order.ts\nimport { OrderStatus } from \"../enums/OrderStatus\";\nimport { ChatMessage } from \"./ChatMessage\";\n\nexport interface Offer {\n  name: string;\n  price: number;\n  url: string;\n}\n\nexport interface Offers {\n  usdOffers: Offer[];\n  bolivarOffers: Offer[];\n}\n\nexport interface Order {\n  id: string;\n  amount: number;\n  convertedAmount: number;\n  image: string;\n  createdAt: Date;\n  updatedAt: Date;\n  status: OrderStatus;\n  userId: string;\n  exchangeRate: number;\n  bolivarUpdatedAt: Date;\n  usdUpdatedAt: Date;\n  offers: Offers;\n  paymentMethodId: string;\n  accountHolderId: string;\n  chat?: {\n    messages: ChatMessage[];\n    lastUpdated: Date;\n  };\n}\n\nsrc\\controllers\\orderController.ts\n// src/controllers/orderController.ts\nimport { Request, Response } from \"express\";\nimport { OrderStatus } from \"../enums/OrderStatus\";\nimport { db } from \"../firebase\";\nimport { collection, addDoc, serverTimestamp, doc, getDoc,updateDoc } from \"firebase/firestore\";\nimport { uploadFilesToStorage } from \"../utils/uploadUtils\";\nimport { initializeChatForOrder } from \"../utils/chatUtils\"; // Importar la funci\u00f3n para inicializar el chat\n\n/**\n * Crea un nuevo titular de cuenta (AccountHolder) en Firestore.\n * @param req - Objeto de solicitud de Express.\n * @param res - Objeto de respuesta de Express.\n */\nexport const createAccountHolder = async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!res.locals.isAuthenticated) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n    const userId = res.locals.userId;\n    const { name } = req.body;\n\n    if (!name || typeof name !== \"string\") {\n      res.status(400).json({ error: \"Invalid or missing 'name' field\" });\n      return;\n    }\n\n    // Creamos el AccountHolder\n    const newHolder = {\n      name,\n      userId,\n      createdAt: serverTimestamp(),\n    };\n\n    const docRef = await addDoc(collection(db, \"accountHolders\"), newHolder);\n\n    res.status(201).json({\n      success: true,\n      id: docRef.id,\n      name,\n    });\n  } catch (error) {\n    console.error(\"Error creating account holder:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\n/**\n * Crea una nueva orden y la almacena en Firestore.\n * @param req - Objeto de solicitud de Express.\n * @param res - Objeto de respuesta de Express.\n */\nexport const createOrder = async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!res.locals.isAuthenticated) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const {\n      amount,\n      objective,\n      tasa,\n      bsUpdatedAt,\n      usdUpdatedAt,\n      offers,\n      paymentMethodId,\n      accountHolderId,\n    } = req.body;\n    const userId = res.locals.userId;\n\n    const missingFields: string[] = [];\n    if (!amount) missingFields.push(\"amount\");\n    if (!objective) missingFields.push(\"objective\");\n    if (!tasa) missingFields.push(\"tasa\");\n    if (!bsUpdatedAt) missingFields.push(\"bsUpdatedAt\");\n    if (!usdUpdatedAt) missingFields.push(\"usdUpdatedAt\");\n    if (!offers) missingFields.push(\"offers\");\n    if (!paymentMethodId) missingFields.push(\"paymentMethodId\");\n    if (!accountHolderId) missingFields.push(\"accountHolderId\");\n\n    if (missingFields.length > 0) {\n      console.log(\"Missing required fields:\", missingFields.join(\", \"));\n      res.status(400).json({ error: \"Missing required fields: \" + missingFields.join(\", \") });\n      return;\n    }\n\n    const fileList = req.file ? [req.file] : [];\n\n    const uploadedUrls = await uploadFilesToStorage(\n      fileList,\n      \"order-proofs\",\n      (progress: number) => console.log(`Upload progress: ${progress}%`)\n    );\n\n    const newOrder = {\n      amount: parseFloat(amount),\n      convertedAmount: parseFloat(objective),\n      image: uploadedUrls[0] || \"\",\n      createdAt: serverTimestamp(),\n      updatedAt: serverTimestamp(),\n      status: OrderStatus.Placed,\n      userId: userId,\n      exchangeRate: parseFloat(tasa),\n      bolivarUpdatedAt: new Date(bsUpdatedAt),\n      usdUpdatedAt: new Date(usdUpdatedAt),\n      offers: JSON.parse(offers),\n      paymentMethodId: paymentMethodId,\n      accountHolderId: accountHolderId,\n    };\n\n\n    const docRef = await addDoc(collection(db, \"orders\"), newOrder);\n\n    // Inicializar el chat para la orden reci\u00e9n creada\n    await initializeChatForOrder(docRef.id, userId, amount);\n        console.log(\"Creare order1\");\n\n\n    res.status(201).json({\n      success: true,\n      orderId: docRef.id,\n      imageUrl: uploadedUrls[0] || null,\n    });\n  } catch (error) {\n    console.error(\"Error creating order:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\n/**\n * Renderiza la p\u00e1gina de confirmaci\u00f3n de la orden con todos los detalles.\n * @param req - Objeto de solicitud de Express.\n * @param res - Objeto de respuesta de Express.\n */\nexport const renderOrderConfirmation = async (req: Request, res: Response) => {\n  const { orderId } = req.query;\n\n  if (!orderId || typeof orderId !== \"string\") {\n    return res.status(400).render(\"error\", {\n      status: 400,\n      statusText: \"Bad Request\",\n      message: \"ID de orden inv\u00e1lido.\",\n    });\n  }\n\n  try {\n    const orderRef = doc(db, \"orders\", orderId);\n    const orderSnap = await getDoc(orderRef);\n\n    if (!orderSnap.exists()) {\n      return res.status(404).render(\"error\", {\n        status: 404,\n        statusText: \"Not Found\",\n        message: \"Orden no encontrada.\",\n      });\n    }\n\n    const order = orderSnap.data();\n\n    if (\n      typeof order.amount !== \"number\" ||\n      typeof order.convertedAmount !== \"number\" ||\n      typeof order.image !== \"string\" ||\n      typeof order.status !== \"string\" ||\n      typeof order.createdAt !== \"object\" ||\n      typeof order.exchangeRate !== \"number\" ||\n      typeof order.bolivarUpdatedAt !== \"object\"\n    ) {\n      return res.status(500).render(\"error\", {\n        status: 500,\n        statusText: \"Internal Server Error\",\n        message: \"Corrupt order data.\",\n      });\n    }\n\n    res.render(\"orderConfirmation\", { order });\n  } catch (error) {\n    console.error(\"Error al obtener la orden:\", error);\n    res.status(500).render(\"error\", {\n      status: 500,\n      statusText: \"Internal Server Error\",\n      message: \"Ocurri\u00f3 un error al procesar tu solicitud.\",\n    });\n  }\n};\n\n/**\n * Cierra una orden (actualiza su estado de 'placed' a 'completed').\n * @param req - Objeto de solicitud de Express.\n * @param res - Objeto de respuesta de Express.\n */\nexport const closeOrder = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { orderId } = req.body;\n    if (!orderId) {\n      res.status(400).json({ error: \"orderId is required\" });\n      return;\n    }\n    const orderRef = doc(db, \"orders\", orderId);\n    await updateDoc(orderRef, { status: OrderStatus.Completed, updatedAt: serverTimestamp() });\n    res.json({ success: true });\n  } catch (error) {\n    console.error(\"Error closing order:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\nsrc\\routes\\orderRoutes.ts\n// src/routes/orderRoutes.ts\nimport { Router } from \"express\";\nimport {\n  createOrder,\n  renderOrderConfirmation,\n  createAccountHolder,\n  closeOrder\n} from \"../controllers/orderController\";\nimport { checkAuth } from \"../middleware/authMiddleware\";\nimport { checkAdmin } from \"../middleware/adminMiddleware\";\nimport multer from \"multer\";\n\n// Configuraci\u00f3n de multer (memoryStorage para recibir el archivo en buffer)\nconst storage = multer.memoryStorage();\nconst upload = multer({ storage });\n\nconst router = Router();\n\n// POST /orders -> crea una orden\nrouter.post(\"/orders\", checkAuth, upload.single(\"image\"), createOrder);\n\n// POST /accountHolders -> crea un nuevo titular de cuenta\nrouter.post(\"/accountHolders\", checkAuth, createAccountHolder);\n\n// GET /order-confirmation -> renderiza la p\u00e1gina de confirmaci\u00f3n de orden\nrouter.get(\"/order-confirmation\", checkAuth, renderOrderConfirmation);\n\n// Nueva ruta para cerrar \u00f3rdenes (de placed a Completed) - solo admin\nrouter.post(\"/admin/orders/close\", checkAdmin, closeOrder);\n\nexport default router;\n\nsrc\\controllers\\paymentMethodController.ts\n// src/controllers/paymentMethodController.ts\nimport { Request, Response } from \"express\";\nimport { db } from \"../firebase\";\nimport { collection, doc, setDoc, getDoc, updateDoc, query, where, getDocs } from \"firebase/firestore\";\nimport { scraperQueue } from \"../queue\";\n\n/**\n * Crea o actualiza un m\u00e9todo de pago para el usuario autenticado.\n */\nexport const createOrUpdatePaymentMethod = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const paymentMethod = req.body;\n    const userId = res.locals.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    // Validar campos seg\u00fan el tipo de m\u00e9todo de pago\n    if (paymentMethod.type === \"BankAccount\") {\n      const accountNumber = paymentMethod.accountNumber;\n      if (!/^\\d{20}$/.test(accountNumber)) {\n        res.status(400).json({ error: \"El n\u00famero de cuenta debe tener 20 d\u00edgitos y contener solo n\u00fameros.\" });\n        return;\n      }\n    }\n    if (paymentMethod.type === \"MobilePayment\") {\n      const phone = paymentMethod.phone;\n      if (!/^\\d{11}$/.test(phone)) {\n        res.status(400).json({ error: \"El tel\u00e9fono debe tener 11 d\u00edgitos y contener solo n\u00fameros.\" });\n        return;\n      }\n    }\n\n    // Verificar duplicados seg\u00fan el tipo de m\u00e9todo de pago\n    if (paymentMethod.type === \"MobilePayment\") {\n      const paymentMethodsRef = collection(db, \"paymentMethods\");\n      const duplicateQuery = query(\n        paymentMethodsRef,\n        where(\"userId\", \"==\", userId),\n        where(\"type\", \"==\", \"MobilePayment\"),\n        where(\"phone\", \"==\", paymentMethod.phone),\n        where(\"document\", \"==\", paymentMethod.document),\n        where(\"bank\", \"==\", paymentMethod.bank),\n        where(\"isHidden\", \"==\", false)\n      );\n      const duplicateQuerySnapshot = await getDocs(duplicateQuery);\n      let duplicateExists = false;\n      duplicateQuerySnapshot.forEach(docSnap => {\n        if (docSnap.id !== paymentMethod.id) {\n          duplicateExists = true;\n        }\n      });\n      if (duplicateExists) {\n        res.status(400).json({ error: \"Este m\u00e9todo de pago m\u00f3vil ya existe.\" });\n        return;\n      }\n    }\n    if (paymentMethod.type === \"BankAccount\") {\n      const paymentMethodsRef = collection(db, \"paymentMethods\");\n      const duplicateQuery = query(\n        paymentMethodsRef,\n        where(\"type\", \"==\", \"BankAccount\"),\n        where(\"accountNumber\", \"==\", paymentMethod.accountNumber),\n        where(\"isHidden\", \"==\", false)\n      );\n      const duplicateQuerySnapshot = await getDocs(duplicateQuery);\n      let duplicateExists = false;\n      duplicateQuerySnapshot.forEach(docSnap => {\n        if (docSnap.id !== paymentMethod.id) {\n          duplicateExists = true;\n        }\n      });\n      if (duplicateExists) {\n        res.status(400).json({ error: \"Esta cuenta bancaria ya existe.\" });\n        return;\n      }\n    }\n\n    // Asignar el userId al m\u00e9todo de pago y otros campos\n    paymentMethod.userId = userId;\n    paymentMethod.isAffiliated = false;\n    paymentMethod.isHidden = false;\n\n    // Obtener el correo del usuario y asignar alias\n    const userDocSnap = await getDoc(doc(db, \"users\", userId));\n    const userEmail = userDocSnap.exists() ? userDocSnap.data().email : \"\";\n    const username = userEmail.split(\"@\")[0].replace(/\\./g, \"\");\n    paymentMethod.alias = `F.${username}.${paymentMethod.id}`;\n\n    // Guardar/actualizar el m\u00e9todo de pago\n    await setDoc(doc(db, \"paymentMethods\", paymentMethod.id), paymentMethod, { merge: true });\n    await updateDoc(doc(db, \"users\", userId), { paymentMethodId: paymentMethod.id });\n\n    // Encolar el proceso del scraper de forma as\u00edncrona (fire-and-forget)\n    if (paymentMethod.type === \"MobilePayment\") {\n      scraperQueue.add(\n        'BDVRegistrarPagoMovil',\n        { paymentMethodId: paymentMethod.id },\n        {\n          delay: 500,\n          attempts: 3,\n          backoff: { type: 'exponential', delay: 3000 },\n        }\n      )\n      .then(job => {\n        job.finished()\n          .then(async (result: any) => {\n            if (result.status) {\n              await updateDoc(doc(db, \"paymentMethods\", paymentMethod.id), { isAffiliated: true });\n              console.log(\"Payment method updated as affiliated (BDVRegistrarPagoMovil).\");\n            }\n          })\n          .catch(err => {\n            console.error(\"Scraper job finished error:\", err);\n          });\n      })\n      .catch(err => {\n        console.error(\"Failed to add scraper job:\", err);\n      });\n    } else {\n      scraperQueue.add(\n        'BDVRegistrarCuentaBancaria',\n        { paymentMethodId: paymentMethod.id },\n        {\n          delay: 500,\n          attempts: 3,\n          backoff: { type: 'exponential', delay: 3000 },\n        }\n      )\n      .then(job => {\n        job.finished()\n          .then(async (result: any) => {\n            if (result.status) {\n              await updateDoc(doc(db, \"paymentMethods\", paymentMethod.id), { isAffiliated: true });\n              console.log(\"Payment method updated as affiliated (BDVRegistrarCuentaBancaria).\");\n            }\n          })\n          .catch(err => {\n            console.error(\"Scraper job finished error:\", err);\n          });\n      })\n      .catch(err => {\n        console.error(\"Failed to add scraper job:\", err);\n      });\n    }\n\n    // Responder inmediatamente que el m\u00e9todo de pago se guard\u00f3\n    res.status(200).json({ success: true, message: \"Payment method saved successfully\" });\n  } catch (error) {\n    console.error(\"Error saving payment method:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\n/**\n * Obtiene los m\u00e9todos de pago del usuario autenticado.\n */\nexport const getPaymentMethods = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const userId = res.locals.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n    const paymentMethodsRef = collection(db, \"paymentMethods\");\n    const q = query(paymentMethodsRef,\n      where(\"userId\", \"==\", userId),\n      where(\"isHidden\", \"==\", false) // Filtra solo los que no est\u00e1n ocultos\n    );\n    const querySnapshot = await getDocs(q);\n    const methods: any[] = [];\n    querySnapshot.forEach(docSnap => {\n      methods.push(docSnap.data());\n    });\n    // Obtener el m\u00e9todo de pago principal del usuario\n    const userDocSnap = await getDoc(doc(db, \"users\", userId));\n    const defaultPaymentMethodId = userDocSnap.exists() ? (userDocSnap.data() as any).paymentMethodId : null;\n    // Agregar bandera isDefault a cada m\u00e9todo\n    const methodsWithDefault = methods.map(method => ({\n      ...method,\n      isDefault: method.id === defaultPaymentMethodId\n    }));\n    res.status(200).json({ methods: methodsWithDefault });\n  } catch (error) {\n    console.error(\"Error fetching payment methods:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\n/**\n * Actualiza el m\u00e9todo de pago principal del usuario.\n */\nexport const setDefaultPaymentMethod = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { paymentMethodId } = req.body;\n    const userId = res.locals.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n    // Verificar que el m\u00e9todo de pago exista y pertenezca al usuario\n    const paymentMethodDoc = await getDoc(doc(db, \"paymentMethods\", paymentMethodId));\n    if (!paymentMethodDoc.exists() || paymentMethodDoc.data().userId !== userId) {\n      res.status(400).json({ error: \"Invalid payment method\" });\n      return;\n    }\n    await updateDoc(doc(db, \"users\", userId), { paymentMethodId });\n    res.status(200).json({ success: true, message: \"Default payment method updated successfully\" });\n  } catch (error) {\n    console.error(\"Error updating default payment method:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes, a menos que sea estrictamente necesario para cumplir con la solicitud.\nSi necesitas realizar cambios, agrega o reemplaza \u00fanicamente lo necesario para satisfacer los requisitos especificados.\n\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea totalmente compatible con TypeScript.\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de TypeScript.\n\nAseg\u00farate de que cada archivo generado comience con la misma l\u00ednea de comentario que se encuentra en los archivos proporcionados, donde se indica la ubicaci\u00f3n y el nombre del archivo.\n\nAntes de proceder, debes indicarme c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos creados o modificados. IMPORTANTE: solo menciona los archivos que tengan cambios reales.",
            "patron": "",
            "solo_archivos_especificos": true
        },
        "pythonAPI": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/bolivarflash/pythonAPI",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "",
            "archivos_prohibidos": "",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.\n\nCuando yo te lo indique, comienza a pasarme archivo por archivo COMPLETO.\nNO ME PUEDES PASAR ARCHIVOS INCOMPLETOS, ESPERA QUE YO TE COMIENCE A SOLICITAR LOS ARCHIVOS COMPLETOS\n\nNO ME MUESTRES CODIGO HASTA QUE TE LO PIDA",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "codeflow": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/codeflow",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__,.git,venv",
            "archivos_prohibidos": "README.md,projects_config.json,config_handler.py,.gitignore",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.\n\nCuando yo te lo indique, comienza a pasarme archivo por archivo COMPLETO.\nNO ME PUEDES PASAR ARCHIVOS INCOMPLETOS, ESPERA QUE YO TE COMIENCE A SOLICITAR LOS ARCHIVOS COMPLETOS\n\nNO ME MUESTRES CODIGO HASTA QUE TE LO PIDA",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "bolivarflashv2": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/bolivarflashv2",
            "directorio_principal": "",
            "archivos": "adminChat.css,adminChat.js,adminChatsContent.ejs,adminController.ts,authController.ts,authRoutes.ts,chat.ejs,chat.css,chat.js,chatContent.ejs,ChatMessage.ts,chats.ejs,chatsController.ts,chatsRoutes.ts,chatUtils.ts,index.ejs,mainLayout.ejs,Order.ts,orderController.ts,package.json,server.ts,socket.ts,uploadUtils.ts",
            "directorios_prohibidos": "node_modules,.git,scrapers,repay,locales",
            "archivos_prohibidos": "package-lock.json,.gitignore,checkEJSFiles.js,mejoras.md,package.json,serviceAccountKey.json,jquery-3.7.1.min.js,.env,tsconfig.json,nodemon.json",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con typescript\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de typescript\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.\n\nSi generas o modificas un archivo ejs en la primera linea debes agregar un comentario de html en donde especifiques la ruta y el nombre del archivo.\nSi generas o modificas un archivo js o ts o tsx en la primera linea debes agregar un comentario de javascript en donde especifiques la ruta y el nombre del archivo.",
            "patron": "",
            "solo_archivos_especificos": true
        },
        "automatiza": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/automatiza",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "",
            "archivos_prohibidos": "",
            "formatos_prohibidos": "",
            "prompt": "",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "BinanceAPI": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/binanceAPI",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__,.git,venv",
            "archivos_prohibidos": ".gitignore,README.md,chromedriver.exe",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDAME EL ARCHIVO COMPLETO CORREGIDO\nNO ME MUESTRES ARCHIVOS QUE NO TENGAN CAMBIOS REALES",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "bfcodigos": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/bfcodigos",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__,.git,venv",
            "archivos_prohibidos": ".env,.gitignore",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDAME EL ARCHIVO COMPLETO CORREGIDO\nNO ME MUESTRES ARCHIVOS QUE NO TENGAN CAMBIOS REALES",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "gestor": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/gestor",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "node_modules,.next,.git",
            "archivos_prohibidos": "package-lock.json",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con typescript\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de typescript\nAseg\u00farate de que cada archivo generado comience con una linea con un comentario que indique la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.\n\nCuando yo te lo indique, comienza a pasarme archivo por archivo COMPLETO.",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "goadmin": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/TestEducation/backend2",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "node_modules,.git,api",
            "archivos_prohibidos": "go.sum,package-lock.json,.gitignore",
            "formatos_prohibidos": "",
            "prompt": "ME VAS A ENVIAR SOLO LOS ARCHIVOS QUE REQUIERAN CAMBIOS REALES\nCADA ARCHIVO COMENZARA  CON UNA PRIMERA LINEA  DE PROGRAMACION QUE EXPRESARA SU UBICACION Y NOMBRE EJEMPLO //server.js o //test.js AL PRINCIPIO DE CADA CODIGO",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "test-cursos": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/test-cursos",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "node_modules,.git,.next",
            "archivos_prohibidos": "package-lock.json,README.md,.gitignore",
            "formatos_prohibidos": ".MD",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con typescript\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de typescript\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.\n\nCuando yo te lo indique, comienza a pasarme archivo por archivo COMPLETO.\nNO ME PUEDES PASAR ARCHIVOS INCOMPLETOS, ESPERA QUE YO TE COMIENCE A SOLICITAR LOS ARCHIVOS COMPLETOS\n\nNO ME MUESTRES CODIGO HASTA QUE TE LO PIDA",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "test": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/test",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "node_modules,.git,.next,",
            "archivos_prohibidos": "tsconfig.tsbuildinfo,package-lock.json,.gitignore,.dockerignore",
            "formatos_prohibidos": ".MD",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con typescript\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de typescript\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.\n\nCuando yo te lo indique, comienza a pasarme archivo por archivo COMPLETO.\nNO ME PUEDES PASAR ARCHIVOS INCOMPLETOS, ESPERA QUE YO TE COMIENCE A SOLICITAR LOS ARCHIVOS COMPLETOS\n\nNO ME MUESTRES CODIGO HASTA QUE TE LO PIDA",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "seleniumtest": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/test-selenium",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": ".git,__pycache__,venv",
            "archivos_prohibidos": "",
            "formatos_prohibidos": ".exe",
            "prompt": "",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "cr2": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/cr2",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "node_modules,.git,dist,logs",
            "archivos_prohibidos": "package-lock.json,.gitignore,requisitos.md,countries.json",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes, a menos que sea estrictamente necesario para cumplir con la solicitud.\nSi necesitas realizar cambios, agrega o reemplaza \u00fanicamente lo necesario para satisfacer los requisitos especificados.\n\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea totalmente compatible con TypeScript.\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de TypeScript.\n\nAseg\u00farate de que cada archivo generado comience con la misma l\u00ednea de comentario que se encuentra en los archivos proporcionados, donde se indica la ubicaci\u00f3n y el nombre del archivo.\n\nAntes de proceder, debes indicarme c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos creados o modificados. IMPORTANTE: solo menciona los archivos que tengan cambios reales.",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "HSGmailSender": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/HSGmailSender",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__,.git,venv,plantilla",
            "archivos_prohibidos": ".env,.gitignore",
            "formatos_prohibidos": ".md,.json,.log",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.\n\nCuando yo te lo indique, comienza a pasarme archivo por archivo COMPLETO.\nNO ME PUEDES PASAR ARCHIVOS INCOMPLETOS, ESPERA QUE YO TE COMIENCE A SOLICITAR LOS ARCHIVOS COMPLETOS\n\nNO ME MUESTRES CODIGO HASTA QUE TE LO PIDA",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "marketingv3": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/marketingv3",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": ".firebase,.git,build,node_modules",
            "archivos_prohibidos": "package-lock.json",
            "formatos_prohibidos": ".svg,.md",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con javascript\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de javascript\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDebes indicarme primero c\u00f3mo solucionar\u00edas la situaci\u00f3n y proporcionarme la lista de archivos\n creados o modificados IMPORTANTE SOLO LOS ARCHIVOS QUE TENGAN CAMBIOS REALES.\n\nCuando yo te lo indique, comienza a pasarme archivo por archivo COMPLETO.\nNO ME PUEDES PASAR ARCHIVOS INCOMPLETOS, ESPERA QUE YO TE COMIENCE A SOLICITAR LOS ARCHIVOS COMPLETOS",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "HSBounceador": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/HSBounceador",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__,.git",
            "archivos_prohibidos": ".env,.gitignore",
            "formatos_prohibidos": ".json",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDAME EL ARCHIVO COMPLETO CORREGIDO\nNO ME MUESTRES ARCHIVOS QUE NO TENGAN CAMBIOS REALES",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "HSGmailCorregidor": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/HSGmailCorregidor",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "",
            "archivos_prohibidos": "",
            "formatos_prohibidos": "",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDAME EL ARCHIVO COMPLETO CORREGIDO\nNO ME MUESTRES ARCHIVOS QUE NO TENGAN CAMBIOS REALES",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "hispanos": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/Hispanos",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "node_modules,.git,dist,logs,vendor,plantilla,images,phpmailer,admin,client,vendor",
            "archivos_prohibidos": "package-lock.json,bootstrap.min.js,jquery-3.6.0.min.js,.env,.gitignore,isotope.pkgd.min.js,anm.js,map-cluster-rating.js,admin.controller.ts,client.controller.ts",
            "formatos_prohibidos": ".svg,.css,.png,.jpg,.scss,.eot,.ttf,.woff,.woff2,.map,.ini,.json",
            "prompt": "PRIMERO TE DARE CONTEXTO ANALIZALO Y LUEGO ANALIZA MI SOLICITUD\nNO ME DES ARCHIVOS INCOMPLETOS BAJO NINGUN MOTIVO\nSOLO DEBES PROPORCIONARME LOS ARCHIVOS QUE HAYAS CREADO O EN LOS QUE HAYAS HECHO CAMBIOS REALES ME REFIERO A CAMBIOS EN EL CODIGO NO A CAMBIOS EN COMENTARIOS\nAgrega en cada archivo un unico comentario con la ubicacion y el nombre ejemplo:  , Ese es el unico tipo de comentario que tienes permitido agregar, cualquier otro comentario que no sea ubicacion y nombre de archivo debe ser borrado. \nNO PUEDES AGREGAR OTROS COMENTARIOS SOLO EL DE LA PRIMERA LINEA\n\nPOR FAVOR HAZ TUS CAMBIOS METICULOSAMENTE SI NECESITAS MODIFICAR UNA VISTA TUS CAMBIOS NO DEBEN PERJUDICAR EL DISE\u00d1O\nNO AGREGUES COMENTARIOS Y SI ENCUENTRAS BORRALOS INCLYENDO LOS JSDoc A NO SER QUE SEAN EL DE LA PRIMERA LINEA CON UBICACION Y NOMBRE, ESE TIPO DE COMENTARIOS SI MANTENLO\n\nLimitate a modificar estrictamente las funcionalidades que te se\u00f1alo en mi solicitud, no alteres otras funcionalidades a no ser que sea estrictamente necesario para cumplir mi solicitud\n\nNO PUEDES MODIFICAR OTRAS PARTES DEL CODIGO QUE NO ESTEN VINCULADAS A MI SOLICITUD, TIENES TERMINANTEMENTE PROHIBIDO HACER ESO, no quiero cambios en funciones que no esten relacionadas con mis cambios.\n\nCUANDO GENERES CODIGO EN CADA ARCHIVO COLOCALE UN COMENTARIO CON SU UBICACION Y NOMBRE INCLUSO HASTA PARA LOS ejs con un comentario especial similar a este <!--  src/views/csv/file.ejs -->\n\nDAME UNA PEQUE\u00d1A EXPLICACION DE LO QUE HARAS ANTES DE EMPEZAR A PROGRAMAR",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "EnviaCorreosHSDestacados": {
            "ruta_base": "C:/Users/jonat/Documents/Repositorios/EnviaCorreosHSDestacados",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__",
            "archivos_prohibidos": "",
            "formatos_prohibidos": ".pdf",
            "prompt": "",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "BuscadorOfertasHS": {
            "ruta_base": "C:\\Users\\jonat\\Documents\\Repositorios\\BuscadorOfertasHS",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__,venv,.git,logs,computrabajo,indeed-extension,infojobs-extension,linkedin-extension,scrapers,researchers",
            "archivos_prohibidos": ".gitignore,Instrucciones.txt,hispanos-v4.json,webs.json",
            "formatos_prohibidos": ".log,.tmp,.bak,.csv,.md,.mp3",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDAME EL ARCHIVO COMPLETO CORREGIDO\nNO ME MUESTRES ARCHIVOS QUE NO TENGAN CAMBIOS REALES\nEn cada primera linea agrega la ubicacion y nombre de archivo ejemplo # computrabajo/main.py\n\nCRITICO: TIENES PROHIBIDO MODIFICAR LINEAS QUE NO ESTEN RELACIONADAS CON LOS CAMBIOS QUE TE ESTOY SOLICITANDO EN MI SOLICITUD\n\nCRITICO: LIMITATE A HACER TUS CAMBIOS SIN AGREGAR COMENTARIOS CONTEXTUALES DEL TIPO --- MODIFICATION START SOLO QUIERO CAMBIOS DE CODIGOS REALES\n\nCRITICO: TIENES PROHIBIDO MODIFICAR LINEAS QUE NO ESTEN RELACIONADAS CON LOS CAMBIOS QUE TE ESTOY SOLICITANDO EN MI SOLICITUD\n\n\nIMPORTANTE, SIEMPRE ANTES DE COMENZAR A PROGRAMAR DAME UNA PEQUE\u00d1A Y RESUMIDA EXPLICACION DE PORQUE ESTA SUCEDIENDO EL PROBLEMA",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "C:\\Users\\jonat\\Documents\\Repositorios\\BuscadorWebsHS": {
            "ruta_base": "",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "node_modules,.git,.vscode,dist,build",
            "archivos_prohibidos": ".env",
            "formatos_prohibidos": ".log,.tmp,.bak",
            "prompt": "",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "BuscadorWebsHS": {
            "ruta_base": "C:\\Users\\jonat\\Documents\\Repositorios\\BuscadorWebsHS",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__,.git",
            "archivos_prohibidos": ".env,__init__.py",
            "formatos_prohibidos": ".log,.tmp,.bak,.csv,.json",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDAME EL ARCHIVO COMPLETO CORREGIDO\nNO ME MUESTRES ARCHIVOS QUE NO TENGAN CAMBIOS REALES\nEn cada primera linea agrega la ubicacion y nombre de archivo ejemplo # main.py",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "BuscadorCorreosHS": {
            "ruta_base": "C:\\Users\\jonat\\Documents\\Repositorios\\BuscadorCorreosHS",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "__pycache__,.git,logs",
            "archivos_prohibidos": ".gitignore",
            "formatos_prohibidos": ".log,.tmp,.bak,.json",
            "prompt": "No elimines funciones, comentarios o fragmentos de c\u00f3digo ya existentes a no ser que sea necesario para\ncumplir la solicitud.\nSi necesitas realizar cambios, solo agrega o reemplaza lo estrictamente necesario para cumplir con los requisitos en la solicitud.\nDevu\u00e9lveme los archivos COMPLETOS que hayas modificado, asegur\u00e1ndote de que el c\u00f3digo sea completamente compatible con Python.\n\nEl c\u00f3digo final no debe generar errores de compilaci\u00f3n ni advertencias de Python.\nAseg\u00farate de que cada archivo generado comience con la misma linea que tienen los que te estoy suministrando donde en un comentario se indica la ubicacion y el nombre del archivo\nDAME EL ARCHIVO COMPLETO CORREGIDO\nNO ME MUESTRES ARCHIVOS QUE NO TENGAN CAMBIOS REALES\nEn cada primera linea agrega la ubicacion y nombre de archivo ejemplo # main.py",
            "patron": "",
            "solo_archivos_especificos": false
        },
        "indeed-extension": {
            "ruta_base": "C:\\Users\\jonat\\Documents\\Repositorios\\indeed-extension",
            "directorio_principal": "",
            "archivos": "",
            "directorios_prohibidos": "node_modules,.git,datos",
            "archivos_prohibidos": ".env",
            "formatos_prohibidos": ".log,.tmp,.bak",
            "prompt": "Siempre debes entregarme los archivos completos \nEstos archivos siempre deben comenzar con un comentario ejemplo\n//proyect.js\n//proyect.json\n//index.html\n\nMi proyecto es una extension de chrome",
            "patron": "",
            "solo_archivos_especificos": false
        }
    },
    "project_metadata": {
        "copiador": {
            "last_used": 1712336827.0
        },
        "makeup": {
            "last_used": 1743997939.4103928
        },
        "bolivarflash": {
            "last_used": 1712336825.0
        },
        "pythonAPI": {
            "last_used": 1712336824.0
        },
        "codeflow": {
            "last_used": 1745653851.4765863
        },
        "bolivarflashv2": {
            "last_used": 1712336822.0
        },
        "automatiza": {
            "last_used": 1712336821.0
        },
        "BinanceAPI": {
            "last_used": 1712336820.0
        },
        "bfcodigos": {
            "last_used": 1743910550.2337205
        },
        "gestor": {
            "last_used": 1712336818.0
        },
        "goadmin": {
            "last_used": 1712336817.0
        },
        "test-cursos": {
            "last_used": 1712336816.0
        },
        "test": {
            "last_used": 1712336815.0
        },
        "seleniumtest": {
            "last_used": 1712336814.0
        },
        "cr2": {
            "last_used": 1712336813.0
        },
        "HSGmailSender": {
            "last_used": 1712336812.0
        },
        "marketingv3": {
            "last_used": 1712336811.0
        },
        "HSBounceador": {
            "last_used": 1712336810.0
        },
        "HSGmailCorregidor": {
            "last_used": 1712336809.0
        },
        "hispanos": {
            "last_used": 1745653044.9140117
        },
        "EnviaCorreosHSDestacados": {
            "last_used": 1712336807.0
        },
        "BuscadorOfertasHS": {
            "last_used": 1745636081.7524667
        },
        "C:\\Users\\jonat\\Documents\\Repositorios\\BuscadorWebsHS": {
            "last_used": 1744158454.4149742
        },
        "BuscadorWebsHS": {
            "last_used": 1744267144.850144
        },
        "BuscadorCorreosHS": {
            "last_used": 1744672039.2096245
        },
        "indeed-extension": {
            "last_used": 1744865846.8038673
        }
    }
}